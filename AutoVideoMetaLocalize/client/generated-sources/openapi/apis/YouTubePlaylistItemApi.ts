/* tslint:disable */
/* eslint-disable */
/**
 * Meta Localize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PlaylistItemListResponse,
    PlaylistItemListResponseFromJSON,
    PlaylistItemListResponseToJSON,
} from '../models';

export interface ApiYouTubePlaylistItemListGetRequest {
    part?: string | null;
    id?: string | null;
    maxResults?: number | null;
    onBehalfOfContentOwner?: string | null;
    pageToken?: string | null;
    playlistId?: string | null;
    videoId?: string | null;
}

/**
 * no description
 */
export class YouTubePlaylistItemApi extends runtime.BaseAPI {

    /**
     */
    async apiYouTubePlaylistItemListGetRaw(requestParameters: ApiYouTubePlaylistItemListGetRequest): Promise<runtime.ApiResponse<PlaylistItemListResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.part !== undefined) {
            queryParameters['Part'] = requestParameters.part;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['Id'] = requestParameters.id;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['MaxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.onBehalfOfContentOwner !== undefined) {
            queryParameters['OnBehalfOfContentOwner'] = requestParameters.onBehalfOfContentOwner;
        }

        if (requestParameters.pageToken !== undefined) {
            queryParameters['PageToken'] = requestParameters.pageToken;
        }

        if (requestParameters.playlistId !== undefined) {
            queryParameters['PlaylistId'] = requestParameters.playlistId;
        }

        if (requestParameters.videoId !== undefined) {
            queryParameters['VideoId'] = requestParameters.videoId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/YouTubePlaylistItem/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistItemListResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiYouTubePlaylistItemListGet(requestParameters: ApiYouTubePlaylistItemListGetRequest): Promise<PlaylistItemListResponse> {
        const response = await this.apiYouTubePlaylistItemListGetRaw(requestParameters);
        return await response.value();
    }

}
