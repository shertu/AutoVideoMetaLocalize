/* tslint:disable */
/* eslint-disable */
/**
 * AutoVideoMetaLocalize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiGoogleAuthAuthenticationRedirectUriPostRequest {
    uri?: string | null;
}

export interface ApiGoogleAuthAuthorizationCodeRequestUrlGetRequest {
    scope: string;
}

export interface ApiGoogleAuthGoogleSignInGetRequest {
    code?: string | null;
    error?: string | null;
}

/**
 * no description
 */
export class GoogleAuthApi extends runtime.BaseAPI {

    /**
     */
    async apiGoogleAuthAuthenticationRedirectUriPostRaw(requestParameters: ApiGoogleAuthAuthenticationRedirectUriPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/GoogleAuth/AuthenticationRedirectUri`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiGoogleAuthAuthenticationRedirectUriPost(requestParameters: ApiGoogleAuthAuthenticationRedirectUriPostRequest): Promise<string> {
        const response = await this.apiGoogleAuthAuthenticationRedirectUriPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGoogleAuthAuthorizationCodeRequestUrlGetRaw(requestParameters: ApiGoogleAuthAuthorizationCodeRequestUrlGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling apiGoogleAuthAuthorizationCodeRequestUrlGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/GoogleAuth/AuthorizationCodeRequestUrl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiGoogleAuthAuthorizationCodeRequestUrlGet(requestParameters: ApiGoogleAuthAuthorizationCodeRequestUrlGetRequest): Promise<string> {
        const response = await this.apiGoogleAuthAuthorizationCodeRequestUrlGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGoogleAuthGoogleSignInGetRaw(requestParameters: ApiGoogleAuthGoogleSignInGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/GoogleAuth/GoogleSignIn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGoogleAuthGoogleSignInGet(requestParameters: ApiGoogleAuthGoogleSignInGetRequest): Promise<void> {
        await this.apiGoogleAuthGoogleSignInGetRaw(requestParameters);
    }

    /**
     */
    async apiGoogleAuthGoogleSignOutGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/GoogleAuth/GoogleSignOut`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGoogleAuthGoogleSignOutGet(): Promise<void> {
        await this.apiGoogleAuthGoogleSignOutGetRaw();
    }

}
