/* tslint:disable */
/* eslint-disable */
/**
 * Meta Localize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiAuthGoogleOAuthCallbackGetRequest {
    code?: string | null;
    error?: string | null;
}

export interface ApiAuthGoogleOAuthSignInGetRequest {
    scope?: string | null;
    postSignInRedirectUri?: string | null;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthGoogleOAuthCallbackGetRaw(requestParameters: ApiAuthGoogleOAuthCallbackGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/GoogleOAuthCallback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthGoogleOAuthCallbackGet(requestParameters: ApiAuthGoogleOAuthCallbackGetRequest): Promise<void> {
        await this.apiAuthGoogleOAuthCallbackGetRaw(requestParameters);
    }

    /**
     */
    async apiAuthGoogleOAuthSignInGetRaw(requestParameters: ApiAuthGoogleOAuthSignInGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.postSignInRedirectUri !== undefined) {
            queryParameters['postSignInRedirectUri'] = requestParameters.postSignInRedirectUri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/GoogleOAuthSignIn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthGoogleOAuthSignInGet(requestParameters: ApiAuthGoogleOAuthSignInGetRequest): Promise<void> {
        await this.apiAuthGoogleOAuthSignInGetRaw(requestParameters);
    }

    /**
     */
    async apiAuthSignOutGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Auth/SignOut`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthSignOutGet(): Promise<void> {
        await this.apiAuthSignOutGetRaw();
    }

}
