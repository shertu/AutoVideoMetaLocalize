/* tslint:disable */
/* eslint-disable */
/**
 * Meta Localize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LanguageTag,
    LanguageTagFromJSON,
    LanguageTagFromJSONTyped,
    LanguageTagToJSON,
    LocalizedString,
    LocalizedStringFromJSON,
    LocalizedStringFromJSONTyped,
    LocalizedStringToJSON,
} from './';

/**
 * 
 * @export
 * @interface LocalizedProperty
 */
export interface LocalizedProperty {
    /**
     * 
     * @type {string}
     * @memberof LocalizedProperty
     */
    _default?: string | null;
    /**
     * 
     * @type {LanguageTag}
     * @memberof LocalizedProperty
     */
    defaultLanguage?: LanguageTag;
    /**
     * 
     * @type {Array<LocalizedString>}
     * @memberof LocalizedProperty
     */
    localized?: Array<LocalizedString> | null;
    /**
     * 
     * @type {string}
     * @memberof LocalizedProperty
     */
    eTag?: string | null;
}

export function LocalizedPropertyFromJSON(json: any): LocalizedProperty {
    return LocalizedPropertyFromJSONTyped(json, false);
}

export function LocalizedPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocalizedProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_default': !exists(json, 'default__') ? undefined : json['default__'],
        'defaultLanguage': !exists(json, 'defaultLanguage') ? undefined : LanguageTagFromJSON(json['defaultLanguage']),
        'localized': !exists(json, 'localized') ? undefined : (json['localized'] === null ? null : (json['localized'] as Array<any>).map(LocalizedStringFromJSON)),
        'eTag': !exists(json, 'eTag') ? undefined : json['eTag'],
    };
}

export function LocalizedPropertyToJSON(value?: LocalizedProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default__': value._default,
        'defaultLanguage': LanguageTagToJSON(value.defaultLanguage),
        'localized': value.localized === undefined ? undefined : (value.localized === null ? null : (value.localized as Array<any>).map(LocalizedStringToJSON)),
        'eTag': value.eTag,
    };
}


